#!/usr/bin/env python
# -*- coding: utf-8 -*-

# IPX800 relay board client
# http://gce-electronics.com
# copyright (c) 2013 tang
 
import sys
import agoclient
import threading
import time
import logging
from pyipx800 import Ipx800
from qpid.datatypes import uuid4
import simplejson

IPX_WEBSERVER_PORT = 8010
STATE_UNKNOWN = 255
STATE_ON = 1
STATE_OFF = 2
STATE_OPENED = 3
STATE_CLOSED = 4
STATE_OPENING = 5
STATE_CLOSING = 6
DEVICE_BOARD = ''
DEVICE_SWITCH = 'switch'
DEVICE_SHUTTER = 'shutter'
DEVICE_ANALOG_TEMPERATURE = 'temperature'
DEVICE_ANALOG_HUMIDITY = 'humidity'
DEVICE_ANALOG_LIGHT = 'light'
DEVICE_ANALOG_VOLT = 'volt'
DEVICE_COUNTER = 'counter'

client = None
devices = {}
states = {}
ipx800 = None
units = 'SI'

#logging.basicConfig(filename='agosqueezebox.log', level=logging.INFO, format="%(asctime)s %(levelname)s : %(message)s")
logging.basicConfig(level=logging.INFO, format="%(asctime)s %(name)s %(levelname)s : %(message)s")

#=================================
#classes
#=================================
class Ipx800AgoConnection(agoclient.AgoConnection):
    """need to overwrite some functions to save device state"""
    def __init__(self, instance):
        self.states = {}
        self.__lock = threading.Lock()
        agoclient.AgoConnection.__init__(self, instance)

    def __del__(self):
        agoclient.AgoConnection.__del__(self)

    def storeUuidMap(self):
        self.__lock.acquire(True)
        with open('/etc/opt/agocontrol/uuidmap/' + self.instance + '.json' , 'w') as outfile:
            items = {}
            for uuid in self.uuids:
                items[uuid] = {'internalid':self.uuids[uuid], 'state':self.states[uuid]}
            simplejson.dump(items, outfile)
        self.__lock.release()

    def loadUuidMap(self):
        self.__lock.acquire(True)
        try:
            with open('/etc/opt/agocontrol/uuidmap/' + self.instance + '.json' , 'r') as infile:
                items = simplejson.load(infile)
                for item in items:
                    self.uuids[item] = items[item]['internalid']
                    self.states[item] = items[item]['state']
        except Exception as e:
            logging.error(str(e))
            pass
        self.__lock.release()

    def removeDevice(self, internalid):
        uuid = self.internalIdToUuid(internalid)
        if ( uuid!=None ):
            #self.emitDeviceRemove(self.internalIdToUuid(internalid))
            del self.devices[uuid]
            #remove uuid from map
            self.uuids.pop(uuid, None)
            #save conf file
            self.storeUuidMap()

    def addDevice(self, internalid, devicetype, devicestate):
        if (self.internalIdToUuid(internalid) == None):
            uuid = str(uuid4())
            self.uuids[uuid] = internalid
            self.states[uuid] = devicestate
            self.storeUuidMap()
        device = {}
        device["devicetype"] = devicetype
        device["internalid"] = internalid
        device["state"] = devicestate
        self.devices[self.internalIdToUuid(internalid)] = device
        self.emitDeviceAnnounce(self.internalIdToUuid(internalid), device)
        if devicestate!=STATE_UNKNOWN:
            self.emitEvent(internalid, "event.device.statechanged", str(devicestate), "")

    def updateDeviceState(self, internalid, devicestate):
        uuid = self.internalIdToUuid(internalid)
        if ( uuid!=None ):
            self.states[uuid] = devicestate
            self.devices[uuid]['state'] = devicestate
            self.storeUuidMap()
            self.emitEvent(internalid, "event.device.statechanged", str(devicestate), "")

    def getDeviceState(self, internalid):
        uuid = self.internalIdToUuid(internalid)
        if ( uuid!=None ):
            return self.states[uuid]
        return None

    def updateDeviceValue(self, internalid, devicetype, devicevalue):
        global units
        uuid = self.internalIdToUuid(internalid)
        if ( uuid!=None ):
            event = 'event.device.statechanged'
            unit = ''
            if devicetype==DEVICE_ANALOG_TEMPERATURE:
                event = 'event.environment.temperaturechanged'
                if units=='SI':
                    unit = 'degC'
                else:
                    try:
                        devicevalue = ((devicevalue*9)+(5*32))/5
                        unit = 'degF'
                    except:
                        unit = 'degC'
            elif devicetype==DEVICE_ANALOG_HUMIDITY:
                event = 'event.environment.humiditychanged'
                unit = '%'
            elif devicetype==DEVICE_ANALOG_VOLT:
                event = 'event.environment.energychanged'
                unit = 'Volts'
            elif devicetype==DEVICE_ANALOG_LIGHT:
                event = 'event.environment.brightnesschanged'
                unit = 'Lux'
            elif devicetype==DEVICE_COUNTER:
                event = 'event.environment.counterchanged'
                unit = '-'
            else:
                event = 'event.device.statechanged'
                unit = None
            self.emitEvent(internalid, event, str(devicevalue), unit)
                


#=================================
#utils
#=================================
def quit(msg):
    """Exit application"""
    global ipx800
    global client
    if client:
        del client
        client = None
    if ipx800:
        ipx800.stop()
        del ipx800
        ipx800 = None
    logging.fatal(msg)
    sys.exit(0)

def buildDeviceName(ipxIp, deviceType, inputs, outputs, analogs, counters):
    """return device name according to ipx ip, device type, inputs, outputs, analogs and counters"""
    inputss = []
    outputss = []
    analogss = []
    counterss = []
    for input in inputs:
        inputss.append(str(input))
    for output in outputs:
        outputss.append(str(output))
    for analog in analogs:
        analogss.append(str(analog))
    for counter in counters:
        counterss.append(str(counter))
    return '%s_%s_%s_%s_%s_%s' % (ipxIp, deviceType, '-'.join(inputss), '-'.join(outputss), '-'.join(analogss), '-'.join(counterss))

def explodeDeviceName(deviceName):
    """return ipx ip, device type and list of inputs and outputs"""
    #logging.info('explodeDeviceName: deviceName=%s' % deviceName)
    (ipxIp, deviceType, inputss, outputss, analogss, counterss) = deviceName.split('_')
    inputs = []
    outputs = []
    analogs = []
    counters = []
    if len(inputss)>0:
        for input in inputss.split('-'):
            try:
                inputs.append(int(input))
            except:
                logging.error('explodeDeviceName: bad input value [%s]' % str(input))
    if len(outputss)>0:
        for output in outputss.split('-'):
            try:
                outputs.append(int(output))
            except:
                logging.error('explodeDeviceName: bad output value [%s]' % str(output))
    if len(analogss)>0:
        for analog in analogss.split('-'):
            try:
                analogs.append(int(analog))
            except:
                logging.error('explodeDeviceName: bad analog value [%s]' % str(analog))
    if len(counterss)>0:
        for counter in counterss.split('-'):
            try:
                counters.append(int(counter))
            except:
                logging.error('explodeDeviceName: bad counter value [%s]' % str(counter))
    return ipxIp, deviceType, inputs, outputs, analogs, counters

def buildDevicesList():
    global devices
    global client
    count = 0
    devices.clear()
    for uuid in client.uuids:
        #get device infos
        internalid = client.uuidToInternalId(uuid)
        if internalid=='ipx800controller':
            #drop controller, it's not a device
            continue
        (ipxIp, deviceType, deviceInputs, deviceOutputs, deviceAnalogs, deviceCounters) = explodeDeviceName(internalid)
        deviceState = client.states[uuid]

        #add entry for current ipx board if necessary
        if not devices.has_key(ipxIp):
            devices[ipxIp] = []

        #store device infos
        if len(deviceType)>0:
            devices[ipxIp].append({'internalid':internalid, 'uuid':uuid ,'state':deviceState, 'type':deviceType, 'inputs': deviceInputs, 'outputs': deviceOutputs, 'analogs':deviceAnalogs, 'counters':deviceCounters})
            #logging.info('buildDevicesList: add new device on ipx %s [type=%s inputs=%s outputs=%s analogs=%s counters=%s]' % (ipxIp, deviceType, str(deviceInputs), str(deviceOutputs), str(deviceAnalogs), str(deviceCounters)))
            count += 1
    logging.debug('%d devices in local devices list' % count)

def getDeviceUsingOutput(ipxIp, outputId):
    """return device using specified outputId
       @param ipxIp: ip address of ipx 
       @param outputId : output id to search for (must be int)
       @return None if no device are using specified output id, device otherwise"""
    global devices
    if not devices.has_key(ipxIp):
        logging.warning('Try to get a device of unknown IPX800 [%s]' % ipxIp)
        return None
    for device in devices[ipxIp]:
        if device['type']==DEVICE_SHUTTER:
            #look at inputs id for shutter too
            logging.debug('search id %d in inputs "%s"' % (outputId, str(device['inputs'])))
            if outputId in device['inputs']:
                return device
        logging.debug('search id %d in outputs "%s"' % (outputId, str(device['outputs'])))
        if outputId in device['outputs']:
            return device
    return None

def getDeviceUsingInput(ipxIp, inputId):
    """return device using specified inputId
       @param ipxIp: ip address of ipx 
       @param inputId : input id to search for
       @return None if no device are using specified input id, device otherwise"""
    global devices
    if not devices.has_key(ipxIp):
        logging.warning('Try to get a device of unknown IPX800 [%s]' % ipxIp)
        return None
    for device in devices[ipxIp]:
        if inputId in device['inputs']:
            return device
    return None

def getDeviceUsingAnalog(ipxIp, analogId):
    """return device using specified analogId
       @param ipxIp: ip address of ipx 
       @param analogId : analog id to search for
       @return None if no device are using specified analog id, device otherwise"""
    global devices
    if not devices.has_key(ipxIp):
        logging.warning('Try to get a device of unknown IPX800 [%s]' % ipxIp)
        return None
    for device in devices[ipxIp]:
        if analogId in device['analogs']:
            return device
    return None

def getDeviceUsingCounter(ipxIp, counterId):
    """return device using specified counterId
       @param ipxIp: ip address of ipx 
       @param counterId : counter id to search for
       @return None if no device are using specified counter id, device otherwise"""
    global devices
    if not devices.has_key(ipxIp):
        logging.warning('Try to get a device of unknown IPX800 [%s]' % ipxIp)
        return None
    for device in devices[ipxIp]:
        if counterId in device['counters']:
            return device
    return None



#=================================
#functions
#=================================
def ipxCallback(ipxIp, content):
    """ipxCallback is called after IPX800 M2M call
       ipxDict: dict of inputs/outputs/counters/timer/... depending on IPX800 M2M config"""
    logging.info('Callback received from ipx "%s": %s' % (ipxIp, str(content)))
    global client
    #update device state
    for item in content:
        if item.startswith('out'):
            #ipx output
            try:
                outputid = int(item.replace('out', ''))
                device = getDeviceUsingOutput(ipxIp, outputid)
                if device:
                    if device['type']==DEVICE_SWITCH:
                        if content[item]==0:
                            if device['state']==STATE_ON:
                                #off action
                                logging.info('Switch "%s@%s" turned off' % (ipxIp, device['internalid']))
                                client.updateDeviceState(device['internalid'], STATE_OFF)
                        elif content[item]==1:
                            if device['state']==STATE_OFF:
                                #on action
                                logging.info('Switch "%s@%s" turned on' % (ipxIp, device['internalid']))
                                client.updateDeviceState(device['internalid'], STATE_ON)
                        else:
                            logging.warning('Unknown value received for switch action [%s]' % str(content[item]))
                    elif device['type']==DEVICE_SHUTTER:
                        if outputid in device['inputs']:
                            #open action
                            if content[item]==0:
                                if device['state']==STATE_OPENING:
                                    #shutter opened
                                    logging.info('Shutter "%s@%s" opened' % (ipxIp, device['internalid']))
                                    client.updateDeviceState(device['internalid'], STATE_OPENED)
                            elif content[item]==1:
                                if device['state']==STATE_CLOSED:
                                    #shutter is opening
                                    logging.info('Shutter "%s@%s" is opening' % (ipxIp, device['internalid']))
                                    client.updateDeviceState(device['internalid'], STATE_OPENING)
                            else:
                                #unknown value
                                logging.warning('Unknown value received for shutter open action [%s]' % str(content[item]))
                        elif outputid in device['outputs']:
                            #close action
                            if content[item]==0:
                                if device['state']==STATE_CLOSING:
                                    #shutter closed
                                    logging.info('Shutter "%s@%s" closed' % (ipxIp, device['internalid']))
                                    client.updateDeviceState(device['internalid'], STATE_CLOSED)
                            elif content[item]==1:
                                if device['state']==STATE_OPENED:
                                    #shutter is closing
                                    logging.info('Shutter "%s@%s" is closing' % (ipxIp, device['internalid']))
                                    client.updateDeviceState(device['internalid'], STATE_CLOSING)
                            else:
                                #unknown value
                                logging.warning('Unknown value received for shutter close action [%s]' % str(content[item]))
                    else:
                        #TODO manage new device using outputs here
                        pass
            except Exception as e:
                logging.error('Exception in ipxCallback (output): %s' % str(e))
        elif item.startswith('in'):
            #ipx input
            try:
                inputid = int(item.replace('in', ''))
                device = getDeviceUsingInput(ipxIp, inputid)
                if device:
                    #TODO manage new device using inputs here
                    pass
            except Exception as e:
                logging.error('Exception in ipxCallback (input): %s' % str(e))
        elif item.startswith('an'):
            #analog
            try:
                analogid = int(item.replace('an', ''))
                device = getDeviceUsingAnalog(ipxIp, analogid)
                if device:
                    if device['type'] in (DEVICE_ANALOG_TEMPERATURE, DEVICE_ANALOG_VOLT, DEVICE_ANALOG_HUMIDITY, DEVICE_ANALOG_LIGHT):
                        logging.info('Update value of analog "%s@%s[%s]" with "%s"' % (ipxIp, device['internalid'], device['type'], str(content[item])))
                        client.updateDeviceValue(device['internalid'], device['type'], content[item])
                    else:
                        #TODO manage new device using analogs here
                        pass
            except Exception as e:
                logging.error('Exception in ipxCallback (analog): %s' % str(e))
        elif item.startswith('cnt'):
            try:
                #counter
                counterid = int(item.replace('cnt', ''))
                device = getDeviceUsingCounter(ipxIp, counterid)
                if device:
                    if device['type']==DEVICE_COUNTER:
                        logging.info('Update value of counter device "%s@%s" with "%s"' % (ipxIp, device['internalid'], str(content[item])))
                        client.updateDeviceValue(device['internalid'], device['type'], content[item])
                    else:
                        #TODO manage new device using counters here
                        pass
            except Exception as e:
                logging.error('Exception in ipxCallback (counter): %s' % str(e))
        else:
            #unmanaged info
            pass

    #update devices list after each callback
    buildDevicesList()

def addIpx800Board(ipxIp):
    """add ipx800 board"""
    global client
    if not devices.has_key(ipxIp):
        #add new ipx800 board
        internalid = buildDeviceName(ipxIp, DEVICE_BOARD, [], [], [], [])
        client.addDevice(internalid, 'ipx800board', STATE_UNKNOWN)
        #refresh devices list
        #buildDevicesList()
    else:
        logging.error('addIpx800Board: ipx already registered!')

def removeIpx800Board(ipxIp):
    """remove ipx800 board"""
    global client
    if ipxIp and len(ipxIp)>0:
        client.removeDevice(ipxIp)
    else:
        logging.error('removeIpx800Board: invalid ip address [%s]' % ipxIp)

def addIpx800Switch(ipxIp, outputId):
    """add switch as virtual device
       @param name: name of switch
       @param output: used relay"""
    global client
    if ipxIp and len(ipxIp)>0:
        #make sure outputId is integer
        try:
            outputId = int(outputId)
        except:
            logger.error('Unable to add switch because invalid id [%s]' % str(outputId))
            return False

        #search device already using specified output
        device = getDeviceUsingOutput(ipxIp, outputId)
        if device:
            logging.error('addIpx800Switch: output id %d is already used by device "%s"' % (outputId, device['internalid']))
            return False
        #add device
        internalid = buildDeviceName(ipxIp, DEVICE_SWITCH, [], [outputId], [], [])
        client.addDevice(internalid, 'ipx800switch', STATE_OFF)
    else:
        logging.error('addIpx800Switch: invalid parameters')

def addIpx800Shutter(ipxIp, relayOpen, relayClose):
    """add switch as virtual device
       @param ipxIp: ipx ip address
       @param relayOpen: relay used to open the shutter (saved in inputs list)
       @param relayClose: relay used to close the shutter (saved in outputs list)"""
    global client
    if ipxIp and len(ipxIp)>0:
        #make sure relayOpen and relayClose are integers
        try:
            relayOpen = int(relayOpen)
            relayClose = int(relayClose)
        except:
            logger.error('Unable to add shutter because invalid id [open=%s close=%s]' % (str(relayOpen), str(relayClose)))
            return False

        #search device already using specified output
        device = getDeviceUsingOutput(ipxIp, relayOpen)
        if device:
            logging.error('addIpx800Shutter: output id %d used to open shutter is already used by device "%s"' % (relayOpen, device['internalid']))
            return False
        device = getDeviceUsingOutput(ipxIp, relayClose)
        if device:
            logging.error('addIpx800Shutter: output id %d used to close shutter is already used by device "%s"' % (relayClose, device['internalid']))
            return False
        #add device
        internalid = buildDeviceName(ipxIp, DEVICE_SHUTTER, [relayOpen], [relayClose], [], [])
        client.addDevice(internalid, 'ipx800shutter', STATE_OPENED)
    else:
        logging.error('addIpx800Switch: invalid parameters')

def addIpx800Analog(ipxIp, analogId, deviceType):
    """add analog device
       @param ipxIp: ipx ip address
       @param analogId: analog id used
       @param deviceType: device type """
    global client
    global ipx800
    if ipxIp and len(ipxIp)>0 and deviceType in (DEVICE_ANALOG_TEMPERATURE, DEVICE_ANALOG_HUMIDITY, DEVICE_ANALOG_VOLT, DEVICE_ANALOG_LIGHT):
        #make sure analogId is integer
        try:
            analogId = int(analogId)
        except:
            logger.error('Unable to add analog because invalid id [%s]' % str(analogId))
            return False

        #search device already using specified analog
        device = getDeviceUsingAnalog(ipxIp, analogId)
        if device:
            logging.error('addIpx800Analog: analog id %s is already used by device "%s"' % (str(analogId), device['internalid']))
            return False

        #get current analog value
        status = ipx800.getStatus(ipxIp)
        value = 0.0
        if status and len(status)>0:
            key = 'an%d' % analogId
            if status.has_key(key):
                value = status[key]

        #add device
        internalid = buildDeviceName(ipxIp, deviceType, [], [], [analogId], [])
        if deviceType==DEVICE_ANALOG_TEMPERATURE:
            client.addDevice(internalid, 'temperaturesensor', STATE_UNKNOWN)
        elif deviceType==DEVICE_ANALOG_HUMIDITY:
            client.addDevice(internalid, 'humiditysensor', STATE_UNKNOWN)
        elif deviceType==DEVICE_ANALOG_VOLT:
            client.addDevice(internalid, 'energymeter', STATE_UNKNOWN)
        elif deviceType==DEVICE_ANALOG_LIGHT:
            client.addDevice(internalid, 'brightnesssensor', STATE_UNKNOWN)
        client.updateDeviceValue(internalid, deviceType, value)
    else:
        logging.error('addIpx800Analog: invalid parameters')
        return False

    logging.info('Analog "%s@%s" added successfully with value "%s"' % (ipxIp, internalid, str(value)))

def addIpx800Counter(ipxIp, counterId):
    """add analog device
       @param ipxIp: ipx ip address
       @param counterId: counter id used"""
    global client
    if ipxIp and len(ipxIp)>0:
        #make sure counterId is integer
        try:
            counterId = int(counterId)
        except:
            logger.error('Unable to add counter because invalid id [%s]' % str(counterId))
            return False

        #search device already using specified output
        device = getDeviceUsingCounter(ipxIp, counterId)
        if device:
            logging.error('addIpx800Counter: counter id %s is already used by device "%s"' % (str(counterId), device['internalid']))
            return False

        #get current counter value
        status = ipx800.getStatus(ipxIp)
        value = 0
        if status and len(status)>0:
            key = 'cnt%d' % counterId
            if status.has_key(key):
                value = status[key]

        #add device
        internalid = buildDeviceName(ipxIp, DEVICE_COUNTER, [], [], [], [counterId])
        client.addDevice(internalid, 'multilevelsensor', STATE_UNKNOWN)
        client.updateDeviceValue(internalid, DEVICE_COUNTER, value)
    else:
        logging.error('addIpx800Counter: invalid parameters')
        return False

    logging.info('Counter "%s@%s" added successfully with value "%s"' % (ipxIp, internalid, str(value)))

def openShutter(internalid, ipxIp, outputId):
    """open shutter
       @param internalid: internal id 
       @param ipxIp: ipx ip
       @param outputId: output id"""
    global ipx800
    ipx800.setOutput(ipxIp, outputId, 1)

def closeShutter(internalid, ipxIp, outputId):
    """open shutter
       @param internalid: internal id 
       @param ipxIp: ipx ip
       @param outputId: output id"""
    global ipx800
    logging.info('closeShutter: ipxIp=%s outputId=%d' % (ipxIp, outputId))
    ipx800.setOutput(ipxIp, outputId, 1)

def turnOnSwitch(internalid, ipxIp, outputId):
    """turn on switch
       @param internalid: internal id 
       @param ipxIp: ipx ip
       @param outputId: output id"""
    global ipx800
    ipx800.setOutput(ipxIp, outputId, 1)

def turnOffSwitch(internalid, ipxIp, outputId):
    """turn off switch
       @param internalid: internal id 
       @param ipxIp: ipx ip
       @param outputId: output id"""
    global ipx800
    ipx800.setOutput(ipxIp, outputId, 0)

def resetCounter(internalid, ipxIp, counterId):
    """Reset specified counter
       @param internalid: internalid
       @param ipxIp: ipx ip
       @param counterId: counter id"""
    global ipx800
    ipx800.setCounter(ipxIp, counterId, 0)

def commandHandler(internalid, content):
    """ago command handler"""
    logging.info('commandHandler: %s, %s' % (internalid,content))
    global client
    command = None

    if content.has_key('command'):
        command = content['command']
    else:
        logging.error('No command specified')
        return None

    if internalid=='ipx800controller':
        #controller command
        if command=='addipx800':
            addIpx800Board(content['ip'])
    else:
        #device command
        (ipxIp, deviceType, inputs, outputs, analogs, counters) = explodeDeviceName(internalid)
        if command=='addswitch':
            logging.info('Add switch on "%s"' % (ipxIp))
            addIpx800Switch(ipxIp, content['relayid'])
            buildDevicesList()
        elif command=='addshutter':
            logging.info('Add shutter on "%s"' % (ipxIp))
            addIpx800Shutter(ipxIp, content['relayopen'], content['relayclose'])
            buildDevicesList()
        elif command=='addanalog':
            logging.info('Add analog on "%s"' % (ipxIp))
            addIpx800Analog(ipxIp, content['analogid'], content['type'])
            buildDevicesList()
        elif command=='addcounter':
            logging.info('Add counter on "%s"' % (ipxIp))
            addIpx800Counter(ipxIp, content['counterid'])
            buildDevicesList()
        elif command=='turnOn':
            if len(outputs)==1:
                logging.info('Turn on switch "%s@%s"' % (ipxIp, internalid))
                turnOnSwitch(internalid, ipxIp, outputs[0])
            else:
                logging.error('command turnOn: outputs is not valid (1 awaited, %d received) [%s]' % (len(outputs), outputs))
        elif command=='turnOff':
            if len(outputs)==1:
                logging.info('Turn off switch "%s@%s"' % (ipxIp, internalid))
                turnOffSwitch(internalid, ipxIp, outputs[0])
            else:
                logging.error('command turnOff: outputs is not valid (1 awaited, %d received) [%s]' % (len(outputs), outputs))
        elif command=='open':
            if len(outputs)==1:
                logging.info('Open shutter "%s@%s"' % (ipxIp, internalid))
                openShutter(internalid, ipxIp, inputs[0])
            else:
                logging.error('command open: inputs is not valid (1 awaited, %d received) [%s]' % (len(inputs), inputs))
        elif command=='close':
            if len(outputs)==1:
                logging.info('Close shutter "%s@%s"' % (ipxIp, internalid))
                closeShutter(internalid, ipxIp, outputs[0])
            else:
                logging.error('command close: outputs is not valid (1 awaited, %d received) [%s]' % (len(outputs), outputs))
        elif command=='allopen':
            for device in devices[ipxIp]:
                if device['type']==DEVICE_SHUTTER:
                    if len(device['inputs'])==1:
                        logging.info('Open shutter "%s@%s"' % (ipxIp, internalid))
                        openShutter(device['internalid'], ipxIp, device['inputs'][0])
        elif command=='allclose':
            for device in devices[ipxIp]:
                if device['type']==DEVICE_SHUTTER:
                    if len(device['outputs'])==1:
                        logging.info('Close shutter "%s@%s"' % (ipxIp, internalid))
                        closeShutter(device['internalid'], ipxIp, device['outputs'][0])
        elif command=='resetcounter':
            if len(counters)==1:
                logging.info('Reset counter "%s@%s"' % (ipxIp, internalid))
                resetCounter(internalid, ipxIp, counters[0])
            else:
                logging.error('command reset: counters is not valid (1 awaited, %d received) [%s]' % (len(counters), counters))
        elif command=='forcestate':
            #get device
            if deviceType==DEVICE_SHUTTER:
                if content['state'].find('open')!=-1:
                    logging.info('Force shutter "%s@%s" state to OPENED' % (ipxIp, internalid))
                    client.updateDeviceState(internalid, STATE_OPENED)
                elif content['state'].find('close')!=-1:
                    logging.info('Force shutter "%s@%s" state to CLOSED' % (ipxIp, internalid))
                    client.updateDeviceState(internalid, STATE_CLOSED)
                else:
                    logging.warning('Unknown state type received from forcestate command [%s]' % content['state'])
            elif deviceType==DEVICE_SWITCH:
                if content['state'].find('on')!=-1:
                    logging.info('Force switch "%s@%s" state to ON' % (ipxIp, internalid))
                    client.updateDeviceState(internalid, STATE_ON)
                elif content['state'].find('off')!=-1:
                    logging.info('Force switch "%s@%s" state to OFF' % (ipxIp, internalid))
                    client.updateDeviceState(internalid, STATE_OFF)
                else:
                    logging.warning('Unknown state type received from forcestate command [%s]' % content['state'])

    #update devices list after each command
    buildDevicesList()

def eventHandler(event, content):
    """ago event handler"""
    #logging.info('eventHandler: %s, %s' % (event, content))
    global client
    uuid = None
    internalid = None

    #get uuid
    if content.has_key('uuid'):
        uuid = content['uuid']
        internalid = client.uuidToInternalId(uuid)
    
    if uuid and uuid in client.uuids:
        #uuid belongs to this handler
        if event=='event.device.remove':
            logging.info('eventHandler: Removing device %s' % internalid)
            client.removeDevice(internalid)

    #update devices list after each event
    buildDevicesList()


#=================================
#main
#=================================
#init
try:
    #connect agoclient
    client = Ipx800AgoConnection('ipx800')

    #get system units
    units = agoclient.getConfigOption("system", "units", "SI")
    logging.info('System units: %s' % units)

    #add known devices
    logging.info('Discover devices:')
    uuids = client.uuids.copy()
    for uuid in uuids:
        internalid = client.uuids[uuid]
        state = client.states[uuid]
        if internalid=='ipx800controller':
            #controller added later
            logging.info('  - add controller (not really added)')
            pass
        else:
            (ipxIp, deviceType, _, _, _, _) = explodeDeviceName(internalid)
            if len(deviceType)==0:
                logging.info('  - add board [%s]' % internalid)
                client.addDevice(internalid, 'ipx800board', state)
            elif deviceType==DEVICE_SWITCH:
                logging.info('  - add switch [%s]' % internalid)
                client.addDevice(internalid, 'ipx800switch', state)
            elif deviceType==DEVICE_SHUTTER:
                logging.info('  - add shutter [%s]' % internalid)
                client.addDevice(internalid, 'ipx800shutter', state)
            elif deviceType in (DEVICE_ANALOG_TEMPERATURE, DEVICE_ANALOG_HUMIDITY, DEVICE_ANALOG_VOLT, DEVICE_ANALOG_LIGHT):
                logging.info ('  - add analog [%s]' % internalid)
                if deviceType==DEVICE_ANALOG_TEMPERATURE:
                    client.addDevice(internalid, 'temperaturesensor', STATE_UNKNOWN)
                if deviceType==DEVICE_ANALOG_HUMIDITY:
                    client.addDevice(internalid, 'humiditysensor', STATE_UNKNOWN)
                if deviceType==DEVICE_ANALOG_VOLT:
                    client.addDevice(internalid, 'energymeter', STATE_UNKNOWN)
                if deviceType==DEVICE_ANALOG_LIGHT:
                    client.addDevice(internalid, 'brightnesssensor', STATE_UNKNOWN)
            elif deviceType==DEVICE_COUNTER:
                logging.info('  - add counter [%s]' % internalid)
                client.addDevice(internalid, 'multilevelsensor', STATE_UNKNOWN)
            else:
                logging.error('  - add nothing: unknown device type [%s]' % (internalid))

    #fill devices list
    buildDevicesList()

    #create ipx800 object
    ipx800 = Ipx800(IPX_WEBSERVER_PORT, ipxCallback)
    ipx800.start()

    #update counter and analog devices value
    logging.info('Set current value to analog and counter devices')
    for ipxIp in devices:
        status = ipx800.getStatus(ipxIp)
        if status and len(status)>0:
            for device in devices[ipxIp]:
                if device['type'] in (DEVICE_ANALOG_TEMPERATURE, DEVICE_ANALOG_HUMIDITY, DEVICE_ANALOG_VOLT, DEVICE_ANALOG_LIGHT):
                    if len(device['analogs'])==1 and status.has_key('an%d' % device['analogs'][0]):
                        value = status['an%d' % device['analogs'][0]]
                        logging.info('  - value "%s" set to "%s@%s"' % (str(value), ipxIp, device['internalid']))
                        client.updateDeviceValue(device['internalid'], device['type'], value)
                    else:
                        logging.warning('Unable to set current analog value to "%s@%s"' % (ipxIp, device['internalid']))
                        logging.info('key=%s status:%s' % ('an%d' % device['analogs'][0], status))
                        client.updateDeviceValue(device['internalid'], device['type'], 0.0)
                elif device['type']==DEVICE_COUNTER:
                    if len(device['counters'])==1 and status.has_key('cnt%d' % device['counters'][0]):
                        value = status['cnt%d' % device['counters'][0]]
                        logging.info('  - value "%s" set to "%s@%s"' % (str(value), ipxIp, device['internalid']))
                        client.updateDeviceValue(device['internalid'], device['type'], value)
                    else:
                        logging.warning('Unable to set current counter value to "%s@%s"' % (ipxIp, device['internalid']))
                        logging.info('key=%s status:%s' % ('cnt%d' % device['counters'][0], status))
                        client.updateDeviceValue(device['internalid'], device['type'], 0)
                
    #add client handlers
    client.addHandler(commandHandler)
    client.addEventHandler(eventHandler)

    #add controller
    logging.info('Add controller')
    client.addDevice('ipx800controller', 'ipx800controller', STATE_UNKNOWN)

except Exception as e:
    #init failed
    quit('Init failed, exit now. (%s)' % str(e))

#run agoclient
try:
    logging.info('Running agoclient...')
    client.run()
except KeyboardInterrupt:
    #stopped by user
    quit('agoipx800 stopped')
except Exception as e:
    logging.fatal('Exception on main: %s' % str(e))
    #stop everything
    quit('agoipx800 stopped')

